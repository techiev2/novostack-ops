#!/bin/bash
opsRoot=$(realpath $0 | xargs dirname | xargs dirname)
appsRoot=$(dirname $opsRoot)

runInNewSession() {
  svc=$1
  _command=$2
  session="session-$svc"
  if [[ -z $(tmux ls 2>&1 | grep $session) ]]; then
    tmux new-session -d -s "$session";
    tmux send "cd $appsRoot/$svc; npm run $_command" ENTER
  else
    $opsRoot/scripts/stop $svc
    tmux kill-session -t "$session"
    tmux new-session -d -s "$session";
    tmux send "cd $appsRoot/$svc; npm run $_command" ENTER
  fi
}

startContainerFor() {
  svc=$1
  [[ ! -d "$appsRoot/$svc" ]] && echo -e "Service $svc not found in apps root." && return 1
  [[ ! -f "$appsRoot/$svc/package.json" ]] && echo -e "No package json found for $svc." && return 1
  pkgJSON=$(cat "$appsRoot/$svc/package.json")
  runner=""
  [[ $(echo $pkgJSON | jq '.scripts."service:watch"') != "null" ]] && runner="service:watch"
  [[ $(echo $pkgJSON | jq '.scripts.dev') != "null" ]] && runner="dev"
  [[ -z $runner ]] && echo -e "No valid runner script registered in ${svc}" && return 1
  runInNewSession $svc $runner
}

main() {
  [[ ! -z $1 ]] && startContainerFor $1 && exit 0
  for svc in $(ls $appsRoot); do
    [[ -d $svc ]] && [[ -s $appsRoot/$svc/package.json ]] && [[ $svc != 'utils' ]] && startContainerFor $svc
  done
}

main $@